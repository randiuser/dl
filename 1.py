# -*- coding: utf-8 -*-
"""1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15K-d8thoOZl928p6u5z8bhH-tWjqzvP1
"""

import numpy as np

# Hebbian Learning Rule
def hebbian_learning(x, y, learning_rate):
    return learning_rate * np.outer(x, y)

# Perceptron Learning Rule
def perceptron_learning(x, y, learning_rate, weights, bias):
    output = np.dot(weights, x) + bias
    error = y - (1 if output >= 0 else 0)
    delta_w = learning_rate * error * x
    delta_b = learning_rate * error
    return delta_w, delta_b

# Delta Learning Rule
def delta_learning(x, y, learning_rate, weights, bias):
    output = np.dot(weights, x) + bias
    error = y - output
    delta_w = learning_rate * error * x
    delta_b = learning_rate * error
    return delta_w, delta_b

# Correlation Learning Rule
def correlation_learning(x, y, learning_rate):
    return learning_rate * np.outer(x, y)

# OutStar Learning Rule
def outstar_learning(x, y, learning_rate, weights):
    return learning_rate * (y - weights) * x

